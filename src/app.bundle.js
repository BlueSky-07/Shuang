/** This script is generated by scripts/build-app.js */

/************************ entry.js ************************/
/** last changed: 2025.1.1 */

/** States **/
const Shuang = {
  resource: {
    dict: {},
    dictHant: {},
    bopomofo: {},
    schemeList: {},
    scheme: {},
    keyboardLayoutList: {},
    keyboardLayout: {},
    emoji: {
      right: '✅', wrong: '❎'
    }
  },
  core: {
    model: {},
    current: {},
    order: {
      shengIndex: 0,
      yunIndex: 0
    },
    history: [],
    keyboardLayout: {}
  },
  app: {
    setting: {
      config: {},
      reload() { }
    },
    importedJS: [],
    modeList: [],
    action: {}
  },
}

const $ = document.querySelector.bind(document)
const $$ = document.querySelectorAll.bind(document)

function importJS(src = '', onload = () => {}) {
  if (Shuang.app.importedJS.includes(src)) {
    onload()
    return
  } else {
    Shuang.app.importedJS.push(src)
  }
  src = `build/${src}.min.js`
  const newScript = document.createElement('script')
  Object.assign(newScript, { src, onload })
  document.body.appendChild(newScript)
}
/******************** EOF entry.js ************************/
/************************ dict.js ************************/
/** last changed: 2025.1.1 */

/**
 *
 * dict 包含所有声母，list 为其列表数组
 *
 * dict.{声母} 包含所有韵母，list 为其列表数组
 *
 * dict.{声母}.{韵母} 包含其汉字样例
 *                   [{生僻字 / 多音字}] 将不会在无拼音模式中出现
 *
 */

Shuang.resource.dict = {
  '': {
    a: '啊', ai: '爱', an: '安', ang: '昂', ao: '奥',
    e: '鹅', ei: ['诶'], en: '恩',
    // eng: ['鞥'],
    er: '耳',
    o: '哦', ou: '欧'
  },
  b: {
    a: '爸', ai: '白', an: '班', ang: '帮', ao: '包',
    ei: '背', en: '本', eng: '崩',
    i: '必', ian: '变', iao: '表', ie: '别', in: '宾', ing: '冰',
    o: '播',
    u: '部'
  },
  c: {
    a: '擦', ai: '彩', an: '餐', ang: '苍', ao: '草',
    e: '测', en: ['岑'], eng: '层',
    i: '词',
    ong: '聪', ou: '凑',
    u: '粗', uan: '窜', ui: '催', un: '村', uo: '错'
  },
  d: {
    a: '打', ai: '代', an: '但', ang: '当', ao: '到',
    e: '德', ei: ['得'],
    // en: ['扽'],
    eng: '等',
    i: '帝', ia: ['嗲'], ian: '点', iao: '钓', ie: '叠', ing: '顶', iu: '丢',
    ong: '东', ou: '斗',
    u: '杜', uan: '短', ui: '对', un: '顿', uo: '多'
  },
  f: {
    a: '法', an: '翻', ang: '方',
    ei: '飞', en: '分', eng: '风',
    o: '佛', ou: ['否'],
    u: '服'
  },
  g: {
    a: ['旮'], ai: '该', an: '干', ang: '刚', ao: '高',
    e: '个', ei: ['给'], en: '跟', eng: '更',
    ong: '公', ou: '狗',
    u: '谷', ua: '瓜', uai: '怪', uan: '关', uang: '光', ui: '鬼', un: '滚', uo: '国'
  },
  h: {
    a: '哈', ai: '海', an: '汉', ang: '杭', ao: '好',
    e: '盒', ei: '黑', en: '很', eng: '横',
    ong: '宏', ou: '猴',
    u: '户', ua: '华', uai: '坏', uan: '欢', uang: '黄', ui: '灰', un: '昏', uo: '火'
  },
  j: {
    i: '机', ia: '加', ian: '间', iang: '江', iao: '交', ie: '杰', in: '金', ing: '京', iong: '窘', iu: '旧',
    u: '居', uan: '卷', ue: '绝', un: '军'
  },
  k: {
    a: ['卡'], ai: '开', an: '看', ang: '康', ao: '靠',
    e: '科',
    // ei: ['尅'],
    en: '肯', eng: '坑',
    ong: '空', ou: '口',
    u: '哭', ua: '夸', uai: '快', uan: '宽', uang: '框', ui: '亏', un: '昆', uo: '阔'
  },
  l: {
    a: '拉', ai: '来', an: '蓝', ang: '狼', ao: '老',
    e: ['乐'], ei: '累', eng: '冷',
    i: '里', ia: ['俩'], ian: '连', iang: '凉', iao: '聊', ie: '列', in: '林', ing: '领', iu: '刘',
    o: ['咯'], ong: '龙', ou: '楼',
    u: '路', uan: '乱', un: '轮', uo: '罗',
    v: '绿', ve: '略'
  },
  m: {
    a: '马', ai: '买', an: '满', ang: '忙', ao: '猫',
    e: '么', ei: '梅', en: '门', eng: '梦',
    i: '米', ian: '面', iao: '秒', ie: '灭', in: '民', ing: '明', iu: '谬',
    o: '魔', ou: '某',
    u: '木'
  },
  n: {
    a: '拿', ai: '乃', an: '南', ang: '囊', ao: '脑',
    e: ['呢'], ei: '内', en: '嫩', eng: '能',
    i: '你', ian: '年', iang: '娘', iao: '鸟', ie: '聂', in: '您', ing: '宁', iu: '牛',
    ong: '农',
    // ou: ['耨'],
    u: '努', uan: '暖', uo: '挪',
    v: '女', ve: '虐'
  },
  p: {
    a: '爬', ai: '牌', an: '潘', ang: '胖', ao: '炮',
    ei: '配', en: '喷', eng: '鹏',
    i: '皮', ian: '片', iao: '飘', ie: '撇', in: '拼', ing: '凭',
    o: '破', ou: '剖',
    u: '普'
  },
  q: {
    i: '齐', ia: '洽', ian: '前', iang: '墙', iao: '桥', ie: '且', in: '琴', ing: '轻', iong: '穷', iu: '求',
    u: '去', uan: '全', ue: '确', un: '群'
  },
  r: {
    an: '然', ang: '让', ao: '绕',
    e: '热', en: '仁', eng: '仍',
    i: '日',
    ong: '容', ou: '肉',
    u: '如',
    // ua: ['挼'],
    uan: '软', ui: '睿', un: '润', uo: '若'
  },
  s: {
    a: '萨', ai: '赛', an: '伞', ang: '桑', ao: '扫',
    e: '色',
    // ei: ['谁'],
    en: '森', eng: '僧',
    i: '司',
    ong: '宋', ou: '搜',
    u: '苏', uan: '酸', ui: '岁', un: '孙', uo: '锁'
  },
  t: {
    a: '它', ai: '台', an: '谈', ang: '汤', ao: '涛',
    e: '特', eng: '疼',
    i: '体', ian: '天', iao: '条', ie: '贴', ing: '听',
    ong: '通', ou: '头',
    u: '图', uan: '团', ui: '推', un: '吞', uo: '拖'
  },
  w: {
    a: '哇', ai: '外', an: '万', ang: '王',
    ei: '为', en: '文', eng: '翁',
    o: '我',
    u: '无'
  },
  x: {
    i: '喜', ia: '夏', ian: '现', iang: '项', iao: '小', ie: '谢', in: '心', ing: '星', iong: '兄', iu: '秀',
    u: '徐', uan: '选', ue: '学', un: '寻'
  },
  y: {
    a: '压', an: '燕', ang: '羊', ao: '药',
    e: '页',
    i: '以', in: '音', ing: '赢',
    o: '哟', ong: '用', ou: '有',
    u: '与', uan: '元', ue: '月', un: '云'
  },
  z: {
    a: '咋', ai: '在', an: '赞', ang: '脏', ao: '造',
    e: '则', ei: '贼', en: '怎', eng: '增',
    i: '子',
    ong: '宗', ou: '走',
    u: '组', uan: '钻', ui: '最', un: '遵', uo: '做'
  },
  ch: {
    a: '茶', ai: '拆', an: '产', ang: '场', ao: '超',
    e: '车', en: '陈', eng: '成',
    i: '吃',
    ong: '充', ou: '丑',
    u: '出', ua: ['欻'], uai: '踹', uan: '穿', uang: '床', ui: '吹', un: '纯', uo: '戳'
  },
  sh: {
    a: '沙', ai: '晒', an: '山', ang: '上', ao: '少',
    e: '设', en: '深', eng: '生',
    i: '是',
    ou: '收',
    u: '书', ua: '刷', uai: '帅', uan: '栓', uang: '双', ui: '水', un: '顺', uo: '说'
  },
  zh: {
    a: '炸', ai: '摘', an: '占', ang: '张', ao: '赵',
    e: '者',
    // ei: ['这'],
    en: '真', eng: '正',
    i: '之',
    ong: '中', ou: '周',
    u: '主', ua: '爪', uai: '拽', uan: '专', uang: '装', ui: '追', un: '准', uo: '捉'
  }
}
for (let sheng of Object.keys(Shuang.resource.dict)) {
  const yunList = Shuang.resource.dict[sheng]
  Shuang.resource.dict[sheng].list = Object.keys(yunList)
}
Shuang.resource.dict.list = Object.keys(Shuang.resource.dict)
/******************** EOF dict.js ************************/
/************************ dict-hant.js ************************/
/** last changed: 2025.1.1 */

/**
 * 繁体字版本
 *
 * dictHant 包含所有声母，list 为其列表数组
 *
 * dictHant.{声母} 包含所有韵母，list 为其列表数组
 *
 * dictHant.{声母}.{韵母} 包含其汉字样例
 *                   [{生僻字 / 多音字}] 将不会在无拼音模式中出现
 *
 */

Shuang.resource.dictHant = {
  '': {
    a: '啊', ai: '愛', an: '安', ang: '昂', ao: '奥',
    e: '鵝', ei: ['诶'], en: '恩',
    // eng: ['鞥'],
    er: '耳',
    o: '哦', ou: '歐'
  },
  b: {
    a: '爸', ai: '白', an: '班', ang: '幫', ao: '包',
    ei: '背', en: '本', eng: '崩',
    i: '必', ian: '變', iao: '錶', ie: '别', in: '賓', ing: '冰',
    o: '播',
    u: '部'
  },
  c: {
    a: '擦', ai: '彩', an: '餐', ang: '苍', ao: '草',
    e: '測', en: ['岑'], eng: '層',
    i: '詞',
    ong: '聰', ou: '凑',
    u: '粗', uan: '竄', ui: '催', un: '村', uo: '錯'
  },
  d: {
    a: '打', ai: '代', an: '但', ang: '當', ao: '到',
    e: '德', ei: ['得'],
    // en: ['扽'],
    eng: '等',
    i: '帝', ia: ['嗲'], ian: '點', iao: '釣', ie: '叠', ing: '頂', iu: '丢',
    ong: '東', ou: '鬥',
    u: '杜', uan: '短', ui: '對', un: '頓', uo: '多'
  },
  f: {
    a: '法', an: '翻', ang: '方',
    ei: '飛', en: '分', eng: '風',
    o: '佛', ou: ['否'],
    u: '服'
  },
  g: {
    a: ['旮'], ai: '該', an: '幹', ang: '剛', ao: '高',
    e: '個', ei: ['給'], en: '跟', eng: '更',
    ong: '公', ou: '狗',
    u: '谷', ua: '瓜', uai: '怪', uan: '關', uang: '光', ui: '鬼', un: '滚', uo: '國'
  },
  h: {
    a: '哈', ai: '海', an: '漢', ang: '杭', ao: '好',
    e: '盒', ei: '黑', en: '很', eng: '横',
    ong: '宏', ou: '猴',
    u: '户', ua: '華', uai: '壞', uan: '歡', uang: '黄', ui: '灰', un: '昏', uo: '火'
  },
  j: {
    i: '機', ia: '加', ian: '間', iang: '江', iao: '交', ie: '傑', in: '金', ing: '京', iong: '窘', iu: '舊',
    u: '居', uan: '卷', ue: '絶', un: '军'
  },
  k: {
    a: ['卡'], ai: '開', an: '看', ang: '康', ao: '靠',
    e: '科',
    // ei: ['尅'],
    en: '肯', eng: '坑',
    ong: '空', ou: '口',
    u: '哭', ua: '誇', uai: '快', uan: '寬', uang: '框', ui: '虧', un: '昆', uo: '闊'
  },
  l: {
    a: '拉', ai: '來', an: '藍', ang: '狼', ao: '老',
    e: ['樂'], ei: '累', eng: '冷',
    i: '裏', ia: ['倆'], ian: '連', iang: '凉', iao: '聊', ie: '列', in: '林', ing: '領', iu: '劉',
    o: ['咯'], ong: '龍', ou: '樓',
    u: '路', uan: '亂', un: '輪', uo: '羅',
    v: '緑', ve: '略'
  },
  m: {
    a: '馬', ai: '買', an: '滿', ang: '忙', ao: '猫',
    e: '麽', ei: '梅', en: '門', eng: '夢',
    i: '米', ian: '麵', iao: '秒', ie: '滅', in: '民', ing: '明', iu: '謬',
    o: '魔', ou: '某',
    u: '木'
  },
  n: {
    a: '拿', ai: '乃', an: '南', ang: '囊', ao: '腦',
    e: ['呢'], ei: '内', en: '嫩', eng: '能',
    i: '你', ian: '年', iang: '娘', iao: '鳥', ie: '聶', in: '您', ing: '寧', iu: '牛',
    ong: '農',
    // ou: ['耨'],
    u: '努', uan: '暖', uo: '挪',
    v: '女', ve: '虐'
  },
  p: {
    a: '爬', ai: '牌', an: '潘', ang: '胖', ao: '炮',
    ei: '配', en: '噴', eng: '鵬',
    i: '皮', ian: '片', iao: '飄', ie: '撇', in: '拼', ing: '憑',
    o: '破', ou: '剖',
    u: '普'
  },
  q: {
    i: '齊', ia: '洽', ian: '前', iang: '墻', iao: '橋', ie: '且', in: '琴', ing: '輕', iong: '窮', iu: '求',
    u: '去', uan: '全', ue: '確', un: '群'
  },
  r: {
    an: '然', ang: '讓', ao: '繞',
    e: '熱', en: '仁', eng: '仍',
    i: '日',
    ong: '容', ou: '肉',
    u: '如',
    // ua: ['挼'],
    uan: '軟', ui: '睿', un: '潤', uo: '若'
  },
  s: {
    a: '薩', ai: '賽', an: '傘', ang: '桑', ao: '掃',
    e: '色',
    // ei: ['誰'],
    en: '森', eng: '僧',
    i: '司',
    ong: '宋', ou: '搜',
    u: '蘇', uan: '酸', ui: '歲', un: '孫', uo: '鎖'
  },
  t: {
    a: '它', ai: '臺', an: '談', ang: '湯', ao: '濤',
    e: '特', eng: '疼',
    i: '體', ian: '天', iao: '條', ie: '貼', ing: '聽',
    ong: '通', ou: '頭',
    u: '圖', uan: '團', ui: '推', un: '吞', uo: '拖'
  },
  w: {
    a: '哇', ai: '外', an: '萬', ang: '王',
    ei: '爲', en: '文', eng: '翁',
    o: '我',
    u: '無'
  },
  x: {
    i: '喜', ia: '夏', ian: '現', iang: '項', iao: '小', ie: '謝', in: '心', ing: '星', iong: '兄', iu: '秀',
    u: '徐', uan: '選', ue: '學', un: '尋'
  },
  y: {
    a: '壓', an: '燕', ang: '羊', ao: '藥',
    e: '頁',
    i: '以', in: '音', ing: '贏',
    o: '喲', ong: '用', ou: '有',
    u: '與', uan: '元', ue: '月', un: '雲'
  },
  z: {
    a: '咋', ai: '在', an: '贊', ang: '髒', ao: '造',
    e: '則', ei: '賊', en: '怎', eng: '增',
    i: '子',
    ong: '宗', ou: '走',
    u: '組', uan: '鑽', ui: '最', un: '遵', uo: '做'
  },
  ch: {
    a: '茶', ai: '拆', an: '産', ang: '場', ao: '超',
    e: '車', en: '陳', eng: '成',
    i: '吃',
    ong: '充', ou: '醜',
    u: '出', ua: ['欻'], uai: '踹', uan: '穿', uang: '床', ui: '吹', un: '純', uo: '戳'
  },
  sh: {
    a: '沙', ai: '曬', an: '山', ang: '上', ao: '少',
    e: '設', en: '深', eng: '生',
    i: '是',
    ou: '收',
    u: '書', ua: '刷', uai: '帥', uan: '栓', uang: '雙', ui: '水', un: '順', uo: '説'
  },
  zh: {
    a: '炸', ai: '摘', an: '占', ang: '張', ao: '趙',
    e: '者',
    // ei: ['这'],
    en: '真', eng: '正',
    i: '之',
    ong: '中', ou: '周',
    u: '主', ua: '爪', uai: '拽', uan: '專', uang: '裝', ui: '追', un: '準', uo: '捉'
  }
}
for (let sheng of Object.keys(Shuang.resource.dictHant)) {
  const yunList = Shuang.resource.dictHant[sheng]
  Shuang.resource.dictHant[sheng].list = Object.keys(yunList)
}
Shuang.resource.dictHant.list = Object.keys(Shuang.resource.dictHant)
/******************** EOF dict-hant.js ************************/
/************************ bopomofo.js ************************/
/** last changed: 2025.1.1 */

/**
 * https://www.ifreesite.com/phonetic/phonetic.htm
 */

Shuang.resource.bopomofo = {
  '': {
    a: 'ㄚ', ai: 'ㄞ', an: 'ㄢ', ang: 'ㄤ', ao: 'ㄠ',
    e: 'ㄜ', ei: 'ㄟ', en: 'ㄣ',
    eng: 'ㄥ',
    er: 'ㄦ',
    o: 'ㄛ', ou: 'ㄡ'
  },
  b: {
    a: 'ㄅㄚ', ai: 'ㄅㄞ', an: 'ㄅㄢ', ang: 'ㄅㄤ', ao: 'ㄅㄠ',
    ei: 'ㄅㄟ', en: 'ㄅㄣ', eng: 'ㄅㄥ',
    i: 'ㄅ一', ian: 'ㄅ一ㄢ', iao: 'ㄅ一ㄠ', ie: 'ㄅ一ㄝ', in: 'ㄅ一ㄣ', ing: 'ㄅ一ㄥ',
    o: 'ㄅㄛ',
    u: 'ㄅㄨ'
  },
  c: {
    a: 'ㄘㄚ', ai: 'ㄘㄞ', an: 'ㄘㄢ', ang: 'ㄘㄤ', ao: 'ㄘㄠ',
    e: 'ㄘㄜ', en: 'ㄘㄣ', eng: 'ㄘㄥ',
    i: 'ㄘ',
    ong: 'ㄘㄨㄥ', ou: 'ㄘㄡ',
    u: 'ㄘㄨ', uan: 'ㄘㄨㄢ', ui: 'ㄘㄨㄟ', un: 'ㄘㄨㄣ', uo: 'ㄘㄨㄛ'
  },
  d: {
    a: 'ㄉㄚ', ai: 'ㄉㄞ', an: 'ㄉㄢ', ang: 'ㄉㄤ', ao: 'ㄉㄠ',
    e: 'ㄉㄜ', ei: 'ㄉㄟ', en: 'ㄉㄣ', eng: 'ㄉㄥ',
    i: 'ㄉ一', ia: 'ㄉ一ㄚ', ian: 'ㄉ一ㄢ', iao: 'ㄉ一ㄠ', ie: 'ㄉ一ㄝ', ing: 'ㄉ一ㄥ', iu: 'ㄉ一ㄡ',
    ong: 'ㄉㄨㄥ', ou: 'ㄉㄡ',
    u: 'ㄉㄨ', uan: 'ㄉㄨㄢ', ui: 'ㄉㄨㄟ', un: 'ㄉㄨㄣ', uo: 'ㄉㄨㄛ'
  },
  f: {
    a: 'ㄈㄚ', an: 'ㄈㄢ', ang: 'ㄈㄤ',
    ei: 'ㄈㄟ', en: 'ㄈㄣ', eng: 'ㄈㄥ',
    o: 'ㄈㄛ', ou: 'ㄈㄡ',
    u: 'ㄈㄨ'
  },
  g: {
    a: 'ㄍㄚ', ai: 'ㄍㄞ', an: 'ㄍㄢ', ang: 'ㄍㄤ', ao: 'ㄍㄠ',
    e: 'ㄍㄜ', ei: 'ㄍㄟ', en: 'ㄍㄣ', eng: 'ㄍㄥ',
    ong: 'ㄍㄨㄥ', ou: 'ㄍㄡ',
    u: 'ㄍㄨ', ua: 'ㄍㄨㄚ', uai: 'ㄍㄨㄞ', uan: 'ㄍㄨㄢ', uang: 'ㄍㄨㄤ', ui: 'ㄍㄨㄟ', un: 'ㄍㄨㄣ', uo: 'ㄍㄨㄛ'
  },
  h: {
    a: 'ㄏㄚ', ai: 'ㄏㄞ', an: 'ㄏㄢ', ang: 'ㄏㄤ', ao: 'ㄏㄠ',
    e: 'ㄏㄜ', ei: 'ㄏㄟ', en: 'ㄏㄣ', eng: 'ㄏㄥ',
    ong: 'ㄏㄨㄥ', ou: 'ㄏㄡ',
    u: 'ㄏㄨ', ua: 'ㄏㄨㄚ', uai: 'ㄏㄨㄞ', uan: 'ㄏㄨㄢ', uang: 'ㄏㄨㄤ', ui: 'ㄏㄨㄟ', un: 'ㄏㄨㄣ', uo: 'ㄏㄨㄛ'
  },
  j: {
    i: 'ㄐ一', ia: 'ㄐ一ㄚ', ian: 'ㄐ一ㄢ', iang: 'ㄐ一ㄤ', iao: 'ㄐ一ㄠ', ie: 'ㄐ一ㄝ', in: 'ㄐ一ㄣ', ing: 'ㄐ一ㄥ', iong: 'ㄐㄩㄥ', iu: 'ㄐ一ㄡ',
    u: 'ㄐㄩ', uan: 'ㄐㄩㄢ', ue: 'ㄐㄩㄝ', un: 'ㄐㄩㄣ'
  },
  k: {
    a: 'ㄎㄚ', ai: 'ㄎㄞ', an: 'ㄎㄢ', ang: 'ㄎㄤ', ao: 'ㄎㄠ',
    e: 'ㄎㄜ', ei: 'ㄎㄟ', en: 'ㄎㄣ', eng: 'ㄎㄥ',
    ong: 'ㄎㄨㄥ', ou: 'ㄎㄡ',
    u: 'ㄎㄨ', ua: 'ㄎㄨㄚ', uai: 'ㄎㄨㄞ', uan: 'ㄎㄨㄢ', uang: 'ㄎㄨㄤ', ui: 'ㄎㄨㄟ', un: 'ㄎㄨㄣ', uo: 'ㄎㄨㄛ'
  },
  l: {
    a: 'ㄌㄚ', ai: 'ㄌㄞ', an: 'ㄌㄢ', ang: 'ㄌㄤ', ao: 'ㄌㄠ',
    e: 'ㄌㄜ', ei: 'ㄌㄟ', eng: 'ㄌㄥ',
    i: 'ㄌ一', ia: 'ㄌ一ㄚ', ian: 'ㄌ一ㄢ', iang: 'ㄌ一ㄤ', iao: 'ㄌ一ㄠ', ie: 'ㄌ一ㄝ', in: 'ㄌ一ㄣ', ing: 'ㄌ一ㄥ', iu: 'ㄌ一ㄡ',
    o: 'ㄌㄛ', ong: 'ㄌㄨㄥ', ou: 'ㄌㄡ',
    u: 'ㄌㄨ', uan: 'ㄌㄨㄢ', un: 'ㄌㄨㄣ', uo: 'ㄌㄨㄛ',
    v: 'ㄌㄩ', ve: 'ㄌㄩㄝ'
  },
  m: {
    a: 'ㄇㄚ', ai: 'ㄇㄞ', an: 'ㄇㄢ', ang: 'ㄇㄤ', ao: 'ㄇㄠ',
    e: 'ㄇㄜ', ei: 'ㄇㄟ', en: 'ㄇㄣ', eng: 'ㄇㄥ',
    i: 'ㄇ一', ian: 'ㄇ一ㄢ', iao: 'ㄇ一ㄠ', ie: 'ㄇ一ㄝ', in: 'ㄇ一ㄣ', ing: 'ㄇ一ㄥ', iu: 'ㄇ一ㄡ',
    o: 'ㄇㄛ', ou: 'ㄇㄡ',
    u: 'ㄇㄨ'
  },
  n: {
    a: 'ㄋㄚ', ai: 'ㄋㄞ', an: 'ㄋㄢ', ang: 'ㄋㄤ', ao: 'ㄋㄠ',
    e: 'ㄋㄜ', ei: 'ㄋㄟ', en: 'ㄋㄣ', eng: 'ㄋㄥ',
    i: 'ㄋ一', ian: 'ㄋ一ㄢ', iang: 'ㄋ一ㄤ', iao: 'ㄋ一ㄠ', ie: 'ㄋ一ㄝ', in: 'ㄋ一ㄣ', ing: 'ㄋ一ㄥ', iu: 'ㄋ一ㄡ',
    ong: 'ㄋㄨㄥ', ou: 'ㄋㄡ',
    u: 'ㄋㄨ', uan: 'ㄋㄨㄢ', uo: 'ㄋㄨㄛ',
    v: 'ㄋㄩ', ve: 'ㄋㄩㄝ'
  },
  p: {
    a: 'ㄆㄚ', ai: 'ㄆㄞ', an: 'ㄆㄢ', ang: 'ㄆㄤ', ao: 'ㄆㄠ',
    ei: 'ㄆㄟ', en: 'ㄆㄣ', eng: 'ㄆㄥ',
    i: 'ㄆ一', ian: 'ㄆ一ㄢ', iao: 'ㄆ一ㄠ', ie: 'ㄆ一ㄝ', in: 'ㄆ一ㄣ', ing: 'ㄆ一ㄥ',
    o: 'ㄆㄛ', ou: 'ㄆㄡ',
    u: 'ㄆㄨ'
  },
  q: {
    i: 'ㄑ一', ia: 'ㄑ一ㄚ', ian: 'ㄑ一ㄢ', iang: 'ㄑ一ㄤ', iao: 'ㄑ一ㄠ', ie: 'ㄑ一ㄝ', in: 'ㄑ一ㄣ', ing: 'ㄑ一ㄥ', iong: 'ㄑㄩㄥ', iu: 'ㄑ一ㄡ',
    u: 'ㄑㄩ', uan: 'ㄑㄩㄢ', ue: 'ㄑㄩㄝ', un: 'ㄑㄩㄣ'
  },
  r: {
    an: 'ㄖㄢ', ang: 'ㄖㄤ', ao: 'ㄖㄠ',
    e: 'ㄖㄜ', en: 'ㄖㄣ', eng: 'ㄖㄥ',
    i: 'ㄖ',
    ong: 'ㄖㄨㄥ', ou: 'ㄖㄡ',
    u: 'ㄖㄨ', ua: 'ㄖㄨㄚ', uan: 'ㄖㄨㄢ', ui: 'ㄖㄨㄟ', un: 'ㄖㄨㄣ', uo: 'ㄖㄨㄛ'
  },
  s: {
    a: 'ㄙㄚ', ai: 'ㄙㄞ', an: 'ㄙㄢ', ang: 'ㄙㄤ', ao: 'ㄙㄠ',
    e: 'ㄙㄜ', en: 'ㄙㄣ', eng: 'ㄙㄥ',
    i: 'ㄙ',
    ong: 'ㄙㄨㄥ', ou: 'ㄙㄡ',
    u: 'ㄙㄨ', uan: 'ㄙㄨㄢ', ui: 'ㄙㄨㄟ', un: 'ㄙㄨㄣ', uo: 'ㄙㄨㄛ'
  },
  t: {
    a: 'ㄊㄚ', ai: 'ㄊㄞ', an: 'ㄊㄢ', ang: 'ㄊㄤ', ao: 'ㄊㄠ',
    e: 'ㄊㄜ', eng: 'ㄊㄥ',
    i: 'ㄊ一', ian: 'ㄊ一ㄢ', iao: 'ㄊ一ㄠ', ie: 'ㄊ一ㄝ', ing: 'ㄊ一ㄥ',
    ong: 'ㄊㄨㄥ', ou: 'ㄊㄡ',
    u: 'ㄊㄨ', uan: 'ㄊㄨㄢ', ui: 'ㄊㄨㄟ', un: 'ㄊㄨㄣ', uo: 'ㄊㄨㄛ'
  },
  w: {
    a: 'ㄨㄚ', ai: 'ㄨㄞ', an: 'ㄨㄢ', ang: 'ㄨㄤ',
    ei: 'ㄨㄟ', en: 'ㄨㄣ', eng: 'ㄨㄥ',
    o: 'ㄨㄛ',
    u: 'ㄨ'
  },
  x: {
    i: 'ㄒ一', ia: 'ㄒ一ㄚ', ian: 'ㄒ一ㄢ', iang: 'ㄒ一ㄤ', iao: 'ㄒ一ㄠ', ie: 'ㄒ一ㄝ', in: 'ㄒ一ㄣ', ing: 'ㄒ一ㄥ', iong: 'ㄒㄩㄥ', iu: 'ㄒ一ㄡ',
    u: 'ㄒㄩ', uan: 'ㄒㄩㄢ', ue: 'ㄒㄩㄝ', un: 'ㄒㄩㄣ'
  },
  y: {
    a: '一ㄚ', an: '一ㄢ', ang: '一ㄤ', ao: '一ㄠ',
    e: '一ㄛ',
    i: '一', in: '一ㄣ', ing: '一ㄥ',
    o: '一ㄛ', ong: 'ㄩㄥ', ou: '一ㄡ',
    u: 'ㄩ', uan: 'ㄩㄢ', ue: 'ㄩㄝ', un: 'ㄩㄣ'
  },
  z: {
    a: 'ㄗㄚ', ai: 'ㄗㄞ', an: 'ㄗㄢ', ang: 'ㄗㄤ', ao: 'ㄗㄠ',
    e: 'ㄗㄜ', ei: 'ㄗㄟ', en: 'ㄗㄣ', eng: 'ㄗㄥ',
    i: 'ㄗ',
    ong: 'ㄗㄨㄥ', ou: 'ㄗㄡ',
    u: 'ㄗㄨ', uan: 'ㄗㄨㄢ', ui: 'ㄗㄨㄟ', un: 'ㄗㄨㄣ', uo: 'ㄗㄨㄛ'
  },
  ch: {
    a: 'ㄔㄚ', ai: 'ㄔㄞ', an: 'ㄔㄢ', ang: 'ㄔㄤ', ao: 'ㄔㄠ',
    e: 'ㄔㄜ', en: 'ㄔㄣ', eng: 'ㄔㄥ',
    i: 'ㄔ',
    ong: 'ㄔㄨㄥ', ou: 'ㄔㄡ',
    u: 'ㄔㄨ', ua: 'ㄔㄨㄚ', uai: 'ㄔㄨㄞ', uan: 'ㄔㄨㄢ', uang: 'ㄔㄨㄤ', ui: 'ㄔㄨㄟ', un: 'ㄔㄨㄣ', uo: 'ㄔㄨㄛ'
  },
  sh: {
    a: 'ㄕㄚ', ai: 'ㄕㄞ', an: 'ㄕㄢ', ang: 'ㄕㄤ', ao: 'ㄕㄠ',
    e: 'ㄕㄜ', ei: 'ㄕㄟ', en: 'ㄕㄣ', eng: 'ㄕㄥ',
    i: 'ㄕ',
    ou: 'ㄕㄡ',
    u: 'ㄕㄨ', ua: 'ㄕㄨㄚ', uai: 'ㄕㄨㄞ', uan: 'ㄕㄨㄢ', uang: 'ㄕㄨㄤ', ui: 'ㄕㄨㄟ', un: 'ㄕㄨㄣ', uo: 'ㄕㄨㄛ'
  },
  zh: {
    a: 'ㄓㄚ', ai: 'ㄓㄞ', an: 'ㄓㄢ', ang: 'ㄓㄤ', ao: 'ㄓㄠ',
    e: 'ㄓㄜ', ei: 'ㄓㄟ', en: 'ㄓㄣ', eng: 'ㄓㄥ',
    i: 'ㄓ',
    ong: 'ㄓㄨㄥ', ou: 'ㄓㄡ',
    u: 'ㄓㄨ', ua: 'ㄓㄨㄚ', uai: 'ㄓㄨㄞ', uan: 'ㄓㄨㄢ', uang: 'ㄓㄨㄤ', ui: 'ㄓㄨㄟ', un: 'ㄓㄨㄣ', uo: 'ㄓㄨㄛ'
  }
}/******************** EOF bopomofo.js ************************/
/************************ scheme-list.js ************************/
/** last changed: 2022.3.2 */
/*
  常见方案
  小众方案*
  爱好者方案**
 */

Shuang.resource.schemeList = {
  ziranma: '自然码',
  sougou: '搜狗双拼',
  weiruan: '微软双拼',
  xiaohe: '小鹤双拼',
  zhinengabc: '智能ABC',
  pinyinjiajia: '拼音加加',
  ziguang: '紫光双拼',
  guobiao: '国标双拼*',
  xiaolang: '小浪双拼*',
  daniu: '大牛双拼*',
  lantian: '蓝天双拼*',
  jiandao3: '键道双拼3**',
  jiandao6: '键道双拼6**',
  xingkong: '星空双拼**',
  xiaoguan: '开源小鹳**',
  xiaoyue: '小月双拼**',
  yunbiaokuaipin: '韵标块拼**',
  c: 'C双拼**',
  baiyun: '白云双拼**'
}
/******************** EOF scheme-list.js ************************/
/************************ mode-list.js ************************/
/** last changed: 2018.11.10 */

Shuang.app.modeList = {
  'all-random': {
    name: '全部随机', desc: '全部拼音组合'
  },
  'all-order': {
    name: '全部顺序', desc: '全部拼音组合'
  },
  'hard-random': {
    name: '困难随机', desc: '韵母需转换'
  },
  'hard-random-without-pinyin': {
    name: '无拼音', desc: '无拼音提示'
  }
}
/******************** EOF mode-list.js ************************/
/************************ keyboard-layout-list.js ************************/
/** last changed: 2024.12.26 */

Shuang.resource.keyboardLayoutList = {
  qwerty: 'QWERTY',
  dvorak: 'Dvorak',
  colemak: 'Colemak',
  workman: 'Workman',
  azerty: 'AZERTY',
  qwertz: 'QWERTZ',
  qzerty: 'QZERTY',
}/******************** EOF keyboard-layout-list.js ************************/
/************************ keyboard-layout.js ************************/
/** last changed: 2024.1.8 */

Shuang.core.keyboardLayout = class KeyboardLayout {
  static instance
  static canvas
  static context
  static IMAGE_WIDTH = 1936
  static IMAGE_HEIGHT = 828
  static CANVAS_ID ='keyboard-layout-canvas'
  static CANVAS_WIDTH = 1936
  static CANVAS_HEIGHT = 828
  static CANVAS_FILL_STYLE = '#ffffff'
  static KEYBOARD_AREA_HEIGHT = 600
  static NAME_AREA_START_X = 1600
  static NAME_AREA_START_Y = 450
  static NAME_AREA_WIDTH = 400
  static NAME_AREA_HEIGHT = 250
  static KEY_SIZE = 178
  static KEY_BODY_START_X = 35
  static KEY_BODY_START_Y = 32
  static KEY_BODY_WIDTH = 172
  static KEY_BODY_HEIGHT = 172
  static KEY_BORDER_START_X = 32
  static KEY_BORDER_START_Y = 29
  static KEY_BORDER_WIDTH = 178
  static KEY_BORDER_HEIGHT = 177
  static KEY_BORDER_STROKE_WIDTH = 3
  static KEY_BORDER_STROKE_STYLE = '#000000'
  static KEY_UNDERSCORE_START_X = 24
  static KEY_UNDERSCORE_START_Y = 52
  static KEY_UNDERSCORE_WIDTH = 36
  static KEY_UNDERSCORE_HEIGHT = 6
  static KEY_UNDERSCORE_FILL_STYLE = '#000000'

  static initCanvas(width = KeyboardLayout.CANVAS_WIDTH, height = KeyboardLayout.CANVAS_HEIGHT) {
    if (!KeyboardLayout.canvas) {
      KeyboardLayout.canvas = document.createElement('canvas')
      KeyboardLayout.canvas.setAttribute('id', KeyboardLayout.CANVAS_ID)
    }
    KeyboardLayout.canvas.setAttribute('width', width)
    KeyboardLayout.canvas.setAttribute('height', height)
    KeyboardLayout.context = KeyboardLayout.canvas.getContext('2d', { alpha: false })
  }

  static show() {
    if (!document.getElementById(KeyboardLayout.CANVAS_ID)) {
      document.body.appendChild(KeyboardLayout.canvas)
    }
  }

  static getUrl(callback = (url = '') => {}) {
    if (KeyboardLayout.canvas.toBlob) {
      KeyboardLayout.canvas.toBlob((blob) => {
        callback(URL.createObjectURL(blob))
      })
    } else {
      callback(KeyboardLayout.canvas.toDataURL())
    }
  }

  static init(imgSrc = '', keyboardLayout = {}, callback = (url = '') => {}) {
    KeyboardLayout.instance = new KeyboardLayout(imgSrc, keyboardLayout, callback)
  }

  constructor(imgSrc = '', keyboardLayout = {}, callback = (url = '') => {}) {
    this.keyboardLayout = keyboardLayout
    this.computeKeyboardStyle()
    KeyboardLayout.initCanvas(KeyboardLayout.CANVAS_WIDTH, KeyboardLayout.CANVAS_HEIGHT)
    KeyboardLayout.context.fillStyle = KeyboardLayout.CANVAS_FILL_STYLE
    KeyboardLayout.context.fillRect(0, 0, KeyboardLayout.CANVAS_WIDTH, KeyboardLayout.CANVAS_HEIGHT)
    this.loadImage(imgSrc, () => {
      this.onImageLoad()
      KeyboardLayout.getUrl(callback)
    })
  }

  computeKeyboardStyle() {
    const fixKeyStart = this.keyboardLayout.row3.length > 8
    const fixUnderscore = this.keyboardLayout.row2[3] !== 'f' || this.keyboardLayout.row2[6] !== 'j'
    const fixName = this.keyboardLayout.row3.length > 7

    this.keyboardStyle = {
      fixKeyStart,
      fixUnderscore,
      fixName,
    }
  }

  loadImage(imgSrc = '', onload = () => {}) {
    this.img = new Image(KeyboardLayout.IMAGE_WIDTH, KeyboardLayout.IMAGE_HEIGHT)
    this.img.setAttribute('crossOrigin', 'Anonymous')
    this.img.setAttribute('src', imgSrc)
    this.img.onload = onload
  }

  onImageLoad() {
    // KeyboardLayout.context.drawImage(this.img, 0, 0)
    this.drawRow(0, this.keyboardLayout.row1)
    this.drawRow(1, this.keyboardLayout.row2)
    this.drawRow(2, this.keyboardLayout.row3)
    this.drawTable()
    this.drawName()
  }

  drawRow(targetRow = 0, keyboardLayoutRow = []) {
    for (let targetCol = 0; targetCol < keyboardLayoutRow.length; targetCol ++) {
      const key = keyboardLayoutRow[targetCol]
      if (!key) continue
      const sourceRow0Col = 'qwertyuiop'.split('').findIndex(c => c === key)
      if (sourceRow0Col !== -1) {
        this.drawKey(key, 0, sourceRow0Col, targetRow, targetCol)
        continue
      }
      const sourceRow1Col = 'asdfghjkl;'.split('').findIndex(c => c === key)
      if (sourceRow1Col !== -1) {
        this.drawKey(key, 1, sourceRow1Col, targetRow, targetCol)
        continue
      }
      const sourceRow2Col = 'zxcvbnm'.split('').findIndex(c => c === key)
      if (sourceRow2Col !== -1) {
        this.drawKey(key, 2, sourceRow2Col, targetRow, targetCol)
        continue
      }
    }
  }

  drawKey(key = '', sourceRow = 0, sourceCol = 0, targetRow = 0, targetCol = 0) {
    const sourceBodyStartX = KeyboardLayout.KEY_BODY_START_X + KeyboardLayout.KEY_SIZE / 2 * sourceRow + KeyboardLayout.KEY_SIZE * sourceCol
    const sourceBodyStartY = KeyboardLayout.KEY_BODY_START_Y + KeyboardLayout.KEY_SIZE * sourceRow
    const targetBodyStartX = KeyboardLayout.KEY_BODY_START_X + KeyboardLayout.KEY_SIZE / 2 * targetRow + KeyboardLayout.KEY_SIZE * targetCol + (this.keyboardStyle.fixKeyStart ? -KeyboardLayout.KEY_SIZE / 2 : 0)
    const targetBodyStartY = KeyboardLayout.KEY_BODY_START_Y + KeyboardLayout.KEY_SIZE * targetRow
    const targetBorderStartX = KeyboardLayout.KEY_BORDER_START_X + KeyboardLayout.KEY_SIZE / 2 * targetRow + KeyboardLayout.KEY_SIZE * targetCol + (this.keyboardStyle.fixKeyStart ? -KeyboardLayout.KEY_SIZE / 2 : 0)
    const targetBorderStartY = KeyboardLayout.KEY_BORDER_START_Y + KeyboardLayout.KEY_SIZE * targetRow

    KeyboardLayout.context.fillStyle = KeyboardLayout.CANVAS_FILL_STYLE
    KeyboardLayout.context.fillRect(targetBodyStartX, targetBodyStartY, KeyboardLayout.KEY_BODY_WIDTH, KeyboardLayout.KEY_BODY_HEIGHT)

    KeyboardLayout.context.drawImage(this.img,
      sourceBodyStartX, sourceBodyStartY, KeyboardLayout.KEY_BODY_WIDTH, KeyboardLayout.KEY_BODY_HEIGHT,
      targetBodyStartX, targetBodyStartY, KeyboardLayout.KEY_BODY_WIDTH, KeyboardLayout.KEY_BODY_HEIGHT
    )

    KeyboardLayout.context.lineWidth = KeyboardLayout.KEY_BORDER_STROKE_WIDTH
    KeyboardLayout.context.strokeStyle = KeyboardLayout.KEY_BORDER_STROKE_STYLE
    KeyboardLayout.context.strokeRect(targetBorderStartX, targetBorderStartY, KeyboardLayout.KEY_BORDER_WIDTH, KeyboardLayout.KEY_BORDER_HEIGHT)
    // debug
    // KeyboardLayout.context.fillStyle = 'rgba(0, 0, 123, 0.3)'
    // KeyboardLayout.context.fillRect(targetBodyStartX, targetBodyStartY, KeyboardLayout.KEY_BODY_WIDTH, KeyboardLayout.KEY_BODY_HEIGHT)


    if (this.keyboardStyle.fixUnderscore) {
      if ('fj'.split('').includes(key)) {
        this.drawUnderscore(targetRow, targetCol, KeyboardLayout.CANVAS_FILL_STYLE)
      }
      if (targetRow === 1 && [3, 6].includes(targetCol)) {
        this.drawUnderscore(targetRow, targetCol, KeyboardLayout.KEY_UNDERSCORE_FILL_STYLE, key === 't' ? -3 : 0)
      }
    }
  }

  drawUnderscore(targetRow = 0, targetCol = 0, fillStyle = '', widthDiff = 0) {
    const underscoreStartX = KeyboardLayout.KEY_BODY_START_X + KeyboardLayout.KEY_SIZE / 2 * targetRow + KeyboardLayout.KEY_SIZE * targetCol + KeyboardLayout.KEY_UNDERSCORE_START_X + (this.keyboardStyle.fixKeyStart ? -KeyboardLayout.KEY_SIZE / 2 : 0)
    const underscoreStartY = KeyboardLayout.KEY_BODY_START_Y + KeyboardLayout.KEY_SIZE * targetRow + KeyboardLayout.KEY_UNDERSCORE_START_Y

    KeyboardLayout.context.fillStyle = fillStyle
    KeyboardLayout.context.fillRect(
      underscoreStartX,
      underscoreStartY,
      KeyboardLayout.KEY_UNDERSCORE_WIDTH + widthDiff,
      KeyboardLayout.KEY_UNDERSCORE_HEIGHT
    )
  }

  drawTable() {
    KeyboardLayout.context.drawImage(this.img,
      0, KeyboardLayout.KEYBOARD_AREA_HEIGHT, KeyboardLayout.IMAGE_WIDTH, KeyboardLayout.IMAGE_HEIGHT - KeyboardLayout.KEYBOARD_AREA_HEIGHT,
      0, KeyboardLayout.KEYBOARD_AREA_HEIGHT, KeyboardLayout.IMAGE_WIDTH, KeyboardLayout.IMAGE_HEIGHT - KeyboardLayout.KEYBOARD_AREA_HEIGHT
    )
  }

  drawName() {
    const targetY = this.keyboardStyle.fixName ? KeyboardLayout.KEYBOARD_AREA_HEIGHT : KeyboardLayout.NAME_AREA_START_Y
    KeyboardLayout.context.drawImage(this.img,
      KeyboardLayout.NAME_AREA_START_X, KeyboardLayout.NAME_AREA_START_Y, KeyboardLayout.NAME_AREA_WIDTH, KeyboardLayout.NAME_AREA_HEIGHT,
      KeyboardLayout.NAME_AREA_START_X, targetY, KeyboardLayout.NAME_AREA_WIDTH, KeyboardLayout.NAME_AREA_HEIGHT
    )
  }
}/******************** EOF keyboard-layout.js ************************/
/************************ core.js ************************/
/** last changed: 2019.8.23 */

Shuang.core.model = class Model {
  constructor(sheng = '', yun = '') {
    this.sheng = sheng.toLowerCase()
    this.yun = yun.toLowerCase()
    this.dict = Shuang.resource.dict[this.sheng][this.yun]
    this.scheme = new Set()
    this.view = {
      sheng: this.sheng.toUpperCase().slice(0, 1) + this.sheng.slice(1),
      yun: this.yun
    }
  }
  
  beforeJudge() {
    this.scheme.clear()
    const schemeName = Shuang.app.setting.config.scheme
    const schemeDetail = Shuang.resource.scheme[schemeName].detail
    const pinyin = this.sheng + this.yun
    if (schemeDetail.other[pinyin]) {
      if (Array.isArray(schemeDetail.other[pinyin])) {
        schemeDetail.other[pinyin].forEach(other => this.scheme.add(other))
      } else {
        this.scheme.add(schemeDetail.other[pinyin])
      }
    } else {
      for (const s of schemeDetail.sheng[this.sheng]) {
        for (const y of schemeDetail.yun[this.yun]) {
          this.scheme.add(s + y)
        }
      }
      if (this.yun === 'u' && 'jqxy'.includes(this.sheng)) {
        for (const s of schemeDetail.sheng[this.sheng]) {
          for (const y of schemeDetail.yun.v) {
            this.scheme.add(s + y)
          }
        }
      }
    }
  }
  
  judge(sheng = '', yun = '') {
    this.beforeJudge()
    return this.scheme.has(sheng.toLowerCase() + yun.toLowerCase())
  }
  
  static getRandom() {
    const sheng = Shuang.resource.dict.list[Math.floor(Math.random() * Shuang.resource.dict.list.length)]
    const yun = Shuang.resource.dict[sheng].list[Math.floor(Math.random() * Shuang.resource.dict[sheng].list.length)]
    const instance = new Model(sheng, yun)
    return Model.isSame(instance, Shuang.core.current) ? Model.getRandom() : instance
  }
  
  static getHardRandom() {
    let instance = undefined
    do {
      instance = Model.getRandom()
    } while (instance.sheng === '' || instance.yun.length === 1)
    return instance
  }
  
  static getByOrder() {
    while (true) {
      const sheng = Shuang.resource.dict.list[Shuang.core.order.shengIndex]
      if (sheng !== undefined) {
        const yun = Shuang.resource.dict[sheng].list[Shuang.core.order.yunIndex]
        if (yun) {
          Shuang.core.order.yunIndex++
          return new Model(sheng, yun)
        }
      }
      if (Shuang.core.order.yunIndex === 0) {
        Shuang.core.order.shengIndex = 0
      } else {
        Shuang.core.order.shengIndex++
        Shuang.core.order.yunIndex = 0
      }
    }
  }
  
  static isSame(a, b) {
    return a.sheng === b.sheng && a.yun === b.yun
  }
}
/******************** EOF core.js ************************/
/************************ setting.js ************************/
/** last changed: 2024.1.9 */

Shuang.app.setting = {
  config: {},
  reload() {
    /** Reading Storage or Using Default **/
    this.config = {
      scheme: readStorage('scheme') || 'ziranma',
      mode: readStorage('mode') || 'all-random',
      keyboardLayout: readStorage('keyboardLayout') || 'qwerty',
      showPic: readStorage('showPic') || 'true',
      darkMode: readStorage('darkMode') || detectDarkMode().toString(),
      autoNext: readStorage('autoNext') || 'true',
      autoClear: readStorage('autoClear') || 'true',
      showKeys: readStorage("showKeys") || "true",
      showPressedKey: readStorage("showPressedKey") || "true",
      disableMobileKeyboard: readStorage("disableMobileKeyboard") || "false",
      bopomofo: readStorage("bopomofo") || "false",
    }
    /** Applying Settings :: Changing UI **/
    const { scheme, mode, keyboardLayout, showPic, darkMode, autoNext, autoClear, showKeys, showPressedKey, disableMobileKeyboard, bopomofo } = this.config
    Array.prototype.find.call($('#scheme-select').children,
      schemeOption => Shuang.resource.schemeList[scheme].startsWith(schemeOption.innerText)
    ).selected = true
    $('#mode-select')[Object.keys(Shuang.app.modeList).indexOf(mode)].selected = true
    $('#keyboard-layout-select')[Object.keys(Shuang.resource.keyboardLayoutList).indexOf(keyboardLayout)].selected = true
    $('#pic-switcher').checked = showPic === 'true'
    $('#dark-mode-switcher').checked = darkMode === 'true'
    $('#auto-next-switcher').checked = autoNext === 'true'
    $('#auto-clear-switcher').checked = autoClear === 'true'
    $('#show-keys').checked = showKeys === 'true'
    $('#show-pressed-key').checked = showPressedKey === 'true'
    $('#disable-mobile-keyboard').checked = disableMobileKeyboard === 'true'
    $('#bopomofo-switcher').checked = bopomofo === 'true'
    /** Applying Settings :: Invoking Actions  **/
    this.setKeyboardLayout(Shuang.resource.keyboardLayoutList[keyboardLayout])
    this.setScheme(Shuang.resource.schemeList[scheme], false)
    this.setMode(Shuang.app.modeList[mode].name)
    this.setPicVisible(showPic)
    this.setDarkMode(darkMode)
    this.setAutoNext(autoNext)
    this.setAutoClear(autoClear)
    this.setShowKeys(showKeys)
    this.setShowPressedKey(showPressedKey)
    this.setDisableMobileKeyboard(disableMobileKeyboard)
    this.setBopomofo(bopomofo)
  },
  setScheme(schemeName, next = true) {
    this.config.scheme = Object.keys(Shuang.resource.schemeList)[
      Object.values(Shuang.resource.schemeList)
        .findIndex(scheme => scheme.startsWith(schemeName))
    ]
    importJS('scheme/' + this.config.scheme, () => {
      if (next) Shuang.app.action.next()
      Shuang.core.current.beforeJudge()
      this.updateKeyboardLayout()
      this.updateKeysHint()
      this.updateTips()
    })
    writeStorage('scheme', this.config.scheme)
  },
  setMode(modeName) {
    Shuang.core.history = []
    for (const [mode, { name }] of Object.entries(Shuang.app.modeList)) {
      if (name === modeName) {
        this.config.mode = mode
        $('#mode-desc').innerText = Shuang.app.modeList[mode].desc
        if (mode === 'hard-random-without-pinyin') {
          $('#q').style.display = 'none'
        } else {
          $('#q').style.display = 'block'
        }
        break
      }
    }
    writeStorage('mode', this.config.mode)
  },
  setPicVisible(bool) {
    this.config.showPic = bool.toString()
    if (this.config.showPic === 'false') {
      $('#keyboard').style.display = 'none'
    } else if (this.config.showPic === 'true') {
      $('#keyboard').style.display = 'block'
    }
    writeStorage('showPic', this.config.showPic)
    this.updateKeysHintLayoutRatio()
  },
  setDarkMode(bool) {
    this.config.darkMode = bool.toString()
    if (this.config.darkMode === 'true') {
      $('body').setAttribute('class', 'dark-mode')
    } else if (this.config.darkMode === 'false') {
      $('body').setAttribute('class', '')
    }
    writeStorage('darkMode', this.config.darkMode)
  },
  setAutoNext(bool) {
    this.config.autoNext = bool.toString()
    writeStorage('autoNext', this.config.autoNext)
  },
  setAutoClear(bool) {
    this.config.autoClear = bool.toString()
    writeStorage('autoClear', this.config.autoClear)
  },
  setShowKeys(bool) {
    this.config.showKeys = bool.toString()
    writeStorage('showKeys', this.config.showKeys)
    this.updateKeysHint()
  },
  setShowPressedKey(bool) {
    this.config.showPressedKey = bool.toString()
    writeStorage('showPressedKey', this.config.showPressedKey)
  },
  setDisableMobileKeyboard(bool) {
    this.config.disableMobileKeyboard = bool.toString()
    if (this.config.disableMobileKeyboard === 'true') {
      $('#a').setAttribute('inputmode', 'none')
    } else if (this.config.disableMobileKeyboard === 'false') {
      $('#a').setAttribute('inputmode', 'text')
    }
    writeStorage('disableMobileKeyboard', this.config.disableMobileKeyboard)
  },
  setBopomofo(bool) {
    this.config.bopomofo = bool.toString()
    this.updateQAndDict()
    this.updateKeyboardLayout()
    this.updateKeysHint()
    writeStorage('bopomofo', this.config.bopomofo)
  },
  updateQAndDict() {
    $('#q').innerText = this.config.bopomofo === 'false'
      ? Shuang.core.current.view.sheng + Shuang.core.current.view.yun
      : Shuang.resource.bopomofo[Shuang.core.current.view.sheng.toLowerCase()][Shuang.core.current.view.yun]
    $('#dict').innerText = this.config.bopomofo === 'false'
      ? Shuang.core.current.dict
      : Shuang.resource.dictHant[Shuang.core.current.view.sheng.toLowerCase()][Shuang.core.current.view.yun]
  },
  updateKeysHint() {
    if (!Shuang.resource.keyboardLayout[this.config.keyboardLayout]) return
    this.updateSimulateKeyboard()
    this.updateKeysHintLayoutRatio()
    const keys = $$('.key')
    for (const key of keys) {
      key.classList.remove('answer')
    }
    if (this.config.showKeys === 'false') return
    const answerKeys = new Set()
    for (const [sheng, yun] of Shuang.core.current.scheme) {
      answerKeys.add(sheng)
      answerKeys.add(yun)
    }
    for (const key of keys) {
      if (answerKeys.has(key.getAttribute('key').toLowerCase())) {
        key.classList.add('answer')
      }
    }
  },
  updateKeysHintLayoutRatio() {
    if ($('body').scrollWidth < 700) {
      const width = $('body').scrollWidth === 310 ? 310 : $('#pic').scrollWidth
      const ratio = 1874 / 1928 * width / 680
      if (ratio < 1) {
        if (navigator && navigator.userAgent && /firefox/i.test(navigator.userAgent)) {
          // Firefox 不支持 zoom
          $('#keys').style.transform = `scale(${ratio})`
          $('#keys').style.transformOrigin = `left top`
        } else {
          $('#keys').style.zoom = ratio
        }
        return
      }
    }
    if (navigator && navigator.userAgent && /firefox/i.test(navigator.userAgent)) {
      $('#keys').style.transform = 'unset'
      $('#keys').style.transformOrigin = 'unset'
    } else {
      $('#keys').style.zoom = 'unset'
    }
  },
  updatePressedKeyHint(k) {
    if (this.config.showPressedKey === 'false' || !k) return
    this.updateKeysHintLayoutRatio()
    const keys = $$('.key')
    for (const key of keys) {
      key.classList.remove('pressed')
      if (key.getAttribute('key') && key.getAttribute('key').toLowerCase() === k) {
        key.classList.add('pressed')
        setTimeout(() => {
          key.classList.remove('pressed')
        }, 250)
      }
    }
  },
  updateTips() {
    const tips = $('#tips')
    tips.innerHTML = ''
    const currentScheme = Shuang.resource.scheme[this.config.scheme]
    if (currentScheme.tips) {
      const tipsToView = Array.isArray(currentScheme.tips) ? currentScheme.tips : [currentScheme.tips]
      for (const tip of tipsToView) {
        const newLine = document.createElement('div')
        newLine.classList.add('line')
        newLine.innerHTML = tip
        tips.appendChild(newLine)
      }
    }
  },
  setKeyboardLayout(keyboardLayoutName) {
    this.config.keyboardLayout = Object.keys(Shuang.resource.keyboardLayoutList)[
      Object.values(Shuang.resource.keyboardLayoutList)
        .findIndex(name => keyboardLayoutName === name)
    ]
    importJS('keyboard-layout/' + this.config.keyboardLayout, () => {
      this.updateKeyboardLayout()
    })
    writeStorage('keyboardLayout', this.config.keyboardLayout)
  },
  updateKeyboardLayout() {
    if (this.config.keyboardLayout === 'qwerty') {
      $('#pic').setAttribute('src', `img/${this.config.scheme}${this.config.bopomofo === 'true' ? '.bopomofo' : ''}.svg`)
      $('#keys').classList.remove('fix-left')
      this.updateSimulateKeyboard()
      this.updateKeysHint()
      return
    }
    if (!Shuang.resource.keyboardLayout[this.config.keyboardLayout]) return
    Shuang.core.keyboardLayout.init(
      `img/${this.config.scheme}${this.config.bopomofo === 'true' ? '.bopomofo' : ''}.png`, // svg 在 IE 浏览器下有 Security Error
      Shuang.resource.keyboardLayout[this.config.keyboardLayout],
      (url) => {
        const imgSrc = $('#pic').getAttribute('src')
        if (imgSrc && imgSrc.startsWith('blob:')) {
          URL.revokeObjectURL(imgSrc)
        }
        if (Shuang.core.keyboardLayout.instance.keyboardStyle.fixKeyStart) {
          $('#keys').classList.add('fix-left')
        } else {
          $('#keys').classList.remove('fix-left')
        }
        $('#pic').setAttribute('src', url)
        this.updateSimulateKeyboard()
        this.updateKeysHint()
      }
    )
    // Shuang.core.keyboardLayout.show()
  },
  updateSimulateKeyboard() {
    if (!Shuang.resource.keyboardLayout[this.config.keyboardLayout]) return
    const row1keys = $$('#keys .row-1 .key')
    for (let i = 0; i < row1keys.length; i++) {
      const key = Shuang.resource.keyboardLayout[this.config.keyboardLayout].row1[i]
      row1keys[i].setAttribute('key', key ? key.toUpperCase() : '')
    }
    const row2keys = $$('#keys .row-2 .key')
    for (let i = 0; i < row2keys.length; i++) {
      const key = Shuang.resource.keyboardLayout[this.config.keyboardLayout].row2[i]
      row2keys[i].setAttribute('key', key ? key.toUpperCase() : '')
    }
    const row3keys = $$('#keys .row-3 .key')
    for (let i = 0; i < row3keys.length; i++) {
      const key = Shuang.resource.keyboardLayout[this.config.keyboardLayout].row3[i]
      row3keys[i].setAttribute('key', key ? key.toUpperCase() : '')
    }
  }
}

function detectDarkMode() {
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    return true
  }
  if (new Date().getHours() < 6 || new Date().getHours() > 22) {
    return true
  }
  return false
}

function readStorage(key = '') { return localStorage.getItem(key) }
function writeStorage(key = '', value = '') { localStorage.setItem(key, value) }
/******************** EOF setting.js ************************/
/************************ action.js ************************/
/** last changed: 2025.1.9 */

Shuang.app.action = {
  init() {
    /** Update Resources **/
    if (navigator && navigator.userAgent && /windows|linux/i.test(navigator.userAgent)) {
      Shuang.resource.emoji = { right: '✔️', wrong: '❌' }
    }

    /** Rendering **/
    function renderSelect(target, options, callback) {
      options.forEach(option => {
        const opt = document.createElement('option')
        if (option.disabled) opt.setAttribute('disabled', 'disabled')
        opt.innerText = option.text || option
        target.appendChild(opt)
      })
      target.onchange = e => {
        callback(e.target.value)
      }
    }

    const schemeList = Object.values(Shuang.resource.schemeList)
    const schemes = {
      common: schemeList.filter(scheme => !scheme.endsWith('*')),
      uncommon: schemeList
        .filter(scheme => scheme.endsWith('*') && !scheme.endsWith('**'))
        .map(scheme => scheme.slice(0, -1))
      ,
      rare: schemeList
        .filter(scheme => scheme.endsWith('**'))
        .map(scheme => scheme.slice(0, -2))
    }
    const schemeOptions = [
      { disabled: true, text: '常见' },
      ...schemes.common,
      { disabled: true, text: '小众' },
      ...schemes.uncommon,
      { disabled: true, text: '爱好者' },
      ...schemes.rare,
    ]
    renderSelect($('#scheme-select'), schemeOptions, value => {
      Shuang.app.setting.setScheme(value)
    })
    renderSelect($('#mode-select'), Object.values(Shuang.app.modeList).map(mode => mode.name), value => {
      Shuang.app.setting.setMode(value)
      this.next()
    })
    const keyboardLayoutOptions = Object.values(Shuang.resource.keyboardLayoutList)
    renderSelect($('#keyboard-layout-select'), keyboardLayoutOptions, (value) => {
      Shuang.app.setting.setKeyboardLayout(value)
    })

    /** Setting First Question **/
    Shuang.core.current = new Shuang.core.model('sh', 'uang')

    /** Reset Configs **/
    Shuang.app.setting.reload()

    /** Listen Events **/
    document.addEventListener('keydown', e => {
      if (['Backspace', 'Tab', 'Enter', ' '].includes(e.key)) {
        if (e.preventDefault) {
          e.preventDefault()
        } else {
          event.returnValue = false
        }
      }
    })
    document.addEventListener('keyup', e => {
      this.keyPressed(e)
    })
    $('#pic-switcher').addEventListener('change', e => {
      Shuang.app.setting.setPicVisible(e.target.checked)
    })
    $('#show-keys').addEventListener('change', e => {
      Shuang.app.setting.setShowKeys(e.target.checked)
    })
    $('#dark-mode-switcher').addEventListener('change', e => {
      Shuang.app.setting.setDarkMode(e.target.checked)
    })
    $('#more-settings-switcher').addEventListener('click', e => {
      Shuang.app.action.toggleMoreSettingsVisible()
    })
    $('#auto-next-switcher').addEventListener('change', e => {
      Shuang.app.setting.setAutoNext(e.target.checked)
    })
    $('#auto-clear-switcher').addEventListener('change', e => {
      Shuang.app.setting.setAutoClear(e.target.checked)
    })
    $('#show-pressed-key').addEventListener('change', e => {
      Shuang.app.setting.setShowPressedKey(e.target.checked)
    })
    $('#disable-mobile-keyboard').addEventListener('change', e => {
      Shuang.app.setting.setDisableMobileKeyboard(e.target.checked)
    })
    $('#bopomofo-switcher').addEventListener('change', e => {
      Shuang.app.setting.setBopomofo(e.target.checked)
    })
    $('.pay-name#alipay').addEventListener('mouseover', () => {
      Shuang.app.action.qrShow('alipay-qr')
    })
    $('#alipay-qr').addEventListener('click', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('#alipay-qr').addEventListener('mouseout', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('.pay-name#wxpay').addEventListener('mouseover', () => {
      Shuang.app.action.qrShow('wxpay-qr')
    })
    $('#wxpay-qr').addEventListener('click', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('#wxpay-qr').addEventListener('mouseout', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('#wx-name').addEventListener('mouseover', () => {
      Shuang.app.action.qrShow('wx-qr')
    })
    $('#wx-qr').addEventListener('click', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('#wx-qr').addEventListener('mouseout', e => {
      Shuang.app.action.qrHide(e.target)
    })
    $('#dict').addEventListener('click', () => {
      Shuang.core.current.beforeJudge()
      $('#a').value = Shuang.core.current.scheme.values().next().value
      this.judge()
    })
    window.addEventListener('resize', Shuang.app.setting.updateKeysHintLayoutRatio)
    window.resizeTo(window.outerWidth, window.outerHeight)

    /** Simulate Keyboard */
    const keys = $$('.key')
    for (let i = 0; i < keys.length; i++) {
      // IE 不支持实例化 KeyboardEvent
      if (navigator && navigator.userAgent && /msie|trident/i.test(navigator.userAgent))
        break
      keys[i].addEventListener('click', (e) => {
        const key = e.target.getAttribute('key')
        if (!key) return
        const event = new KeyboardEvent('keyup', { key: key.toLowerCase() })
        event.simulated = true
        document.dispatchEvent(event)
      })
    }

    /** All Done **/
    Shuang.app.setting.updateQAndDict()
    this.redo()
  },
  keyPressed(e) {
    switch (e.key) {
      case 'Backspace':
        this.redo()
        break
      case 'Tab':
        Shuang.core.current.beforeJudge()
        $('#a').value = Shuang.core.current.scheme.values().next().value
        this.judge()
        break
      case 'Enter':
      case ' ':
        if (this.judge()) {
          this.next()
        } else {
          this.redo()
        }
        break
      default:
        if (e.simulated) {
          $('#a').value += e.key.toLowerCase()
        }
        $('#a').value = $('#a').value
          .slice(0, 2)
          .replace(/[^a-zA-Z;]/g, '')
          .split('')
          .map((c, i) => i === 0 ? c.toUpperCase() : c.toLowerCase())
          .join('')
        Shuang.app.setting.updatePressedKeyHint(e.key)
        const canAuto = $('#a').value.length === 2
        const isRight = this.judge()
        if (canAuto) {
          if (isRight && Shuang.app.setting.config.autoNext === 'true') {
            this.next(e.simulated)
          } else if (!isRight && Shuang.app.setting.config.autoClear === 'true') {
            this.redo(e.simulated)
          }
        }
    }
  },
  judge() {
    const input = $('#a')
    const btn = $('#btn')
    const [sheng, yun] = input.value
    if (yun && Shuang.core.current.judge(sheng, yun)) {
      btn.onclick = () => this.next(true)
      btn.innerText = Shuang.resource.emoji.right
      return true
    } else {
      btn.onclick = () => this.redo(true)
      btn.innerText = Shuang.resource.emoji.wrong
      return false
    }
  },
  redo(noFocus) {
    $('#a').value = ''
    if (!noFocus) $('#a').focus()
    $('#btn').onclick = () => this.redo(noFocus)
    $('#btn').innerText = Shuang.resource.emoji.wrong
  },
  next(noFocus) {
    this.redo(noFocus)
    switch (Shuang.app.setting.config.mode) {
      case 'all-random':
        Shuang.core.current = Shuang.core.model.getRandom()
        break
      case 'all-order':
        Shuang.core.current = Shuang.core.model.getByOrder()
        break
      case 'hard-random':
        Shuang.core.current = Shuang.core.model.getHardRandom()
        break
      case 'hard-random-without-pinyin':
        do {
          Shuang.core.current = Shuang.core.model.getHardRandom()
        } while (Array.isArray(Shuang.core.current.dict))
        break
    }
    if (Shuang.core.history.includes(Shuang.core.current.sheng + Shuang.core.current.yun)) this.next()
    else Shuang.core.history = [...Shuang.core.history, Shuang.core.current.sheng + Shuang.core.current.yun].slice(-100)

    // Update Keys Hint
    Shuang.app.setting.updateQAndDict()
    Shuang.core.current.beforeJudge()
    Shuang.app.setting.updateKeysHint()
  },
  qrShow(targetId) {
    $('#' + targetId).style.display = 'block'
  },
  qrHide(target) {
    target.style.display = 'none'
  },
  toggleMoreSettingsVisible() {
    $('#more-settings').style.display = $('#more-settings').style.display === 'block' ? 'none' : 'block'
    $('#more-settings-switcher') .innerText = $('#more-settings').style.display === 'block' ? '收起更多' : '展开更多'
  }
}
/******************** EOF action.js ************************/
/************************ bootstrap.js ************************/
/** last changed: 2024.12.29 */

const polyfills = [
  'https://cdn.jsdelivr.net/npm/@babel/polyfill@7.12.1/dist/polyfill.min.js',
  'https://cdn.jsdelivr.net/npm/classlist.js@1.1.20150312/classList.min.js'
]

if (navigator && navigator.userAgent && /msie|trident/i.test(navigator.userAgent)) {
  let imported = 0
  for (const polyfill of polyfills) {
    const script = document.createElement('script')
    script.setAttribute('src', polyfill)
    script.onload = () => {
      imported ++
      if (imported === polyfills.length) {
        Shuang.app.action.init()
      }
    }
    document.head.appendChild(script)
  }
} else {
  Shuang.app.action.init()
}
/******************** EOF bootstrap.js ************************/
